// <auto-generated />
using System;
using DataAccessLayer.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230213112420_new")]
    partial class @new
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EntityLayer.Concrete.Inventories.InvCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ParentID")
                        .HasColumnType("integer");

                    b.Property<int>("SyncID")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("InvCategories");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Inventories.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<string>("SpecialCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("SysCompanyID")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.HasIndex("SysCompanyID");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Inventories.InvTrans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FromID")
                        .HasColumnType("integer");

                    b.Property<int>("InventoryID")
                        .HasColumnType("integer");

                    b.Property<int>("ToID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("InventoryID");

                    b.ToTable("InvTrans");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Persons.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonFingerID")
                        .HasColumnType("integer");

                    b.Property<int>("PersonTypeID")
                        .HasColumnType("integer");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("SyncID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PersonTypeID");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Persons.PersonAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CTypeID")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CountryID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.ToTable("PersonAddresses");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Persons.PersonCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Body")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DriverLicense")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EnteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExitedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FathersName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FootNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("ID_No")
                        .HasColumnType("integer");

                    b.Property<string>("LFile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("integer");

                    b.Property<int>("MilitaryStatus")
                        .HasColumnType("integer");

                    b.Property<string>("MothersName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<string>("Serial_No")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SysCompanyID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonID")
                        .IsUnique();

                    b.HasIndex("SysCompanyID");

                    b.ToTable("PersonCards");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Persons.PersonDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LFile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<int>("SysDocumentTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.HasIndex("SysDocumentTypeId");

                    b.ToTable("PersonDocuments");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Persons.PersonEdu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EndYear")
                        .HasColumnType("integer");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LFile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SysEduTypeID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.HasIndex("SysEduTypeID");

                    b.ToTable("PersonEdus");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Persons.PersonFinger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeviceID")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("OrginalDate")
                        .HasColumnType("date");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.ToTable("PersonFingers");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Persons.PersonLeave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LFile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("SyncID")
                        .HasColumnType("integer");

                    b.Property<int>("SysLeaveTypeID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.HasIndex("SysLeaveTypeID");

                    b.ToTable("PersonLeaves");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Persons.PersonPass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.ToTable("PersonPasses");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Persons.PersonSocial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("CTypeID")
                        .HasColumnType("smallint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<short>("STypeID")
                        .HasColumnType("smallint");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.ToTable("PersonSocial");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Persons.PersonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("PersonTypes");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Persons.PersonVisa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("SyncID")
                        .HasColumnType("integer");

                    b.Property<int>("SysVisaTypeID")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.HasIndex("SysVisaTypeID");

                    b.ToTable("PersonVisas");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.SysAnnual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("HasLeave")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SysAnnuals");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.SysCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RegNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SysCompanies");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.SysCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SysCountries");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.SysDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ParentID")
                        .HasColumnType("integer");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("SuperVisorID")
                        .HasColumnType("integer");

                    b.Property<int>("SyncID")
                        .HasColumnType("integer");

                    b.Property<int>("SysCompanyID")
                        .HasColumnType("integer");

                    b.Property<int>("SysWorkTempID")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SysCompanyID");

                    b.HasIndex("SysWorkTempID");

                    b.ToTable("SysDepartments");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.SysFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FixerID")
                        .HasColumnType("integer");

                    b.Property<string>("LFile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("SysFeedbackCategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("SysWorkTempItemId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.HasIndex("SysFeedbackCategoryId");

                    b.HasIndex("SysWorkTempItemId");

                    b.ToTable("SysFeedbacks");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.SysFeedbackCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Typeid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("sysid")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SysFeedbackCategories");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.SysFeedbackTrans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("SysFeedbackID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SysFeedbackID");

                    b.ToTable("SysFeedbackTrans");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.SysLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SysLanguages");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.SysLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<int>("ModuleID")
                        .HasColumnType("integer");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<int>("TransID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SysLogs");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.SysModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("IsMain")
                        .HasColumnType("smallint");

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderNo")
                        .HasColumnType("integer");

                    b.Property<int>("ParentID")
                        .HasColumnType("integer");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Vers")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SysModules");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.SysModuleMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MenuGroup")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderNo")
                        .HasColumnType("integer");

                    b.Property<int>("ParentID")
                        .HasColumnType("integer");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("SyncID")
                        .HasColumnType("integer");

                    b.Property<int>("SysModuleID")
                        .HasColumnType("integer");

                    b.Property<string>("TestUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SysModuleID");

                    b.ToTable("SysModuleMenus");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.SysPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentID")
                        .HasColumnType("integer");

                    b.Property<int?>("SyncID")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SysPositions");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.SysUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Utype")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonID")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("SysUsers");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.SysWorkGroups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ParentID")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SysWorkGroups");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.SysWorkTemp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SysWorkTemps");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.SysWorkTempItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("SysWorkTempID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("dayid")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SysWorkTempID");

                    b.ToTable("SysWorkTempItems");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.Types.SysDocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MyProperty")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("TypeID")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SysDocumentTypes");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.Types.SysEduType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SysEduTypes");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.Types.SysLeaveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("IsDamaged")
                        .HasColumnType("smallint");

                    b.Property<short>("IsPaid")
                        .HasColumnType("smallint");

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("SyncID")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SysLeaveTypes");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.Types.SysVisaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SyncID")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SysVisaTypes");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Work.WorkGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ParentID")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("WorkGroupRTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkGroupTypeID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkGroupRTypeId");

                    b.HasIndex("WorkGroupTypeID");

                    b.ToTable("WorkGroups");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Work.WorkGroupArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ParentID")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("WorkGroupAreas");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Work.WorkGroupRType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("WorkGroupRTypes");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Work.WorkGroupType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("WorkGroupTypes");
                });

            modelBuilder.Entity("InvCategoryInventory", b =>
                {
                    b.Property<int>("InvCategoriesId")
                        .HasColumnType("integer");

                    b.Property<int>("InventoriesId")
                        .HasColumnType("integer");

                    b.HasKey("InvCategoriesId", "InventoriesId");

                    b.HasIndex("InventoriesId");

                    b.ToTable("InvCategoryInventory");
                });

            modelBuilder.Entity("PersonSysPosition", b =>
                {
                    b.Property<int>("PersonsId")
                        .HasColumnType("integer");

                    b.Property<int>("SysPositionsId")
                        .HasColumnType("integer");

                    b.HasKey("PersonsId", "SysPositionsId");

                    b.HasIndex("SysPositionsId");

                    b.ToTable("PersonSysPosition");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Inventories.Inventory", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Persons.Person", "Person")
                        .WithMany("Inventories")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.System.SysCompany", "SysCompany")
                        .WithMany("Inventories")
                        .HasForeignKey("SysCompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("SysCompany");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Inventories.InvTrans", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Inventories.Inventory", "Inventory")
                        .WithMany("InvTranses")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Persons.Person", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Persons.PersonType", "PersonType")
                        .WithMany("Persons")
                        .HasForeignKey("PersonTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonType");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Persons.PersonAddress", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Persons.Person", "Person")
                        .WithMany("PersonAddresses")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Persons.PersonCard", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Persons.Person", "Person")
                        .WithOne("PersonCard")
                        .HasForeignKey("EntityLayer.Concrete.Persons.PersonCard", "PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.System.SysCompany", "SysCompany")
                        .WithMany("PersonCards")
                        .HasForeignKey("SysCompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("SysCompany");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Persons.PersonDocument", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Persons.Person", "Person")
                        .WithMany("PersonDocuments")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.System.Types.SysDocumentType", "SysDocumentType")
                        .WithMany("PersonDocuments")
                        .HasForeignKey("SysDocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("SysDocumentType");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Persons.PersonEdu", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Persons.Person", "Person")
                        .WithMany("PersonEdus")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.System.Types.SysEduType", "SysEduType")
                        .WithMany("PersonEdus")
                        .HasForeignKey("SysEduTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("SysEduType");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Persons.PersonFinger", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Persons.Person", "Person")
                        .WithMany("PersonFingers")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Persons.PersonLeave", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Persons.Person", "Person")
                        .WithMany("PersonLeaves")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.System.Types.SysLeaveType", "SysLeaveType")
                        .WithMany("PersonLeaves")
                        .HasForeignKey("SysLeaveTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("SysLeaveType");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Persons.PersonPass", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Persons.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Persons.PersonSocial", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Persons.Person", "Person")
                        .WithMany("PersonSocials")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Persons.PersonVisa", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Persons.Person", "Person")
                        .WithMany("PersonVisas")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.System.Types.SysVisaType", "SysVisaType")
                        .WithMany("PersonVisas")
                        .HasForeignKey("SysVisaTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("SysVisaType");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.SysDepartment", b =>
                {
                    b.HasOne("EntityLayer.Concrete.System.SysCompany", "SysCompany")
                        .WithMany("SysDepartments")
                        .HasForeignKey("SysCompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.System.SysWorkTemp", "SysWorkTemp")
                        .WithMany("SysDepartments")
                        .HasForeignKey("SysWorkTempID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SysCompany");

                    b.Navigation("SysWorkTemp");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.SysFeedback", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Persons.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.System.SysFeedbackCategory", "SysFeedbackCategory")
                        .WithMany("SysFeedbacks")
                        .HasForeignKey("SysFeedbackCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.System.SysWorkTempItem", null)
                        .WithMany("SysFeedbacks")
                        .HasForeignKey("SysWorkTempItemId");

                    b.Navigation("Person");

                    b.Navigation("SysFeedbackCategory");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.SysFeedbackTrans", b =>
                {
                    b.HasOne("EntityLayer.Concrete.System.SysFeedback", "SysFeedback")
                        .WithMany("SysFeedbackTrans")
                        .HasForeignKey("SysFeedbackID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SysFeedback");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.SysModuleMenu", b =>
                {
                    b.HasOne("EntityLayer.Concrete.System.SysModule", "SysModule")
                        .WithMany("SysModuleMenus")
                        .HasForeignKey("SysModuleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SysModule");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.SysUser", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Persons.Person", "Person")
                        .WithOne("SysUser")
                        .HasForeignKey("EntityLayer.Concrete.System.SysUser", "PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.SysWorkTempItem", b =>
                {
                    b.HasOne("EntityLayer.Concrete.System.SysWorkTemp", "SysWorkTemp")
                        .WithMany("SysWorkTempItems")
                        .HasForeignKey("SysWorkTempID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SysWorkTemp");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Work.WorkGroup", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Work.WorkGroupRType", null)
                        .WithMany("WorkGroups")
                        .HasForeignKey("WorkGroupRTypeId");

                    b.HasOne("EntityLayer.Concrete.Work.WorkGroupType", "WorkGroupType")
                        .WithMany("WorkGroups")
                        .HasForeignKey("WorkGroupTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkGroupType");
                });

            modelBuilder.Entity("InvCategoryInventory", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Inventories.InvCategory", null)
                        .WithMany()
                        .HasForeignKey("InvCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Inventories.Inventory", null)
                        .WithMany()
                        .HasForeignKey("InventoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonSysPosition", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Persons.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.System.SysPosition", null)
                        .WithMany()
                        .HasForeignKey("SysPositionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityLayer.Concrete.Inventories.Inventory", b =>
                {
                    b.Navigation("InvTranses");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Persons.Person", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("PersonAddresses");

                    b.Navigation("PersonCard")
                        .IsRequired();

                    b.Navigation("PersonDocuments");

                    b.Navigation("PersonEdus");

                    b.Navigation("PersonFingers");

                    b.Navigation("PersonLeaves");

                    b.Navigation("PersonSocials");

                    b.Navigation("PersonVisas");

                    b.Navigation("SysUser")
                        .IsRequired();
                });

            modelBuilder.Entity("EntityLayer.Concrete.Persons.PersonType", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.SysCompany", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("PersonCards");

                    b.Navigation("SysDepartments");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.SysFeedback", b =>
                {
                    b.Navigation("SysFeedbackTrans");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.SysFeedbackCategory", b =>
                {
                    b.Navigation("SysFeedbacks");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.SysModule", b =>
                {
                    b.Navigation("SysModuleMenus");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.SysWorkTemp", b =>
                {
                    b.Navigation("SysDepartments");

                    b.Navigation("SysWorkTempItems");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.SysWorkTempItem", b =>
                {
                    b.Navigation("SysFeedbacks");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.Types.SysDocumentType", b =>
                {
                    b.Navigation("PersonDocuments");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.Types.SysEduType", b =>
                {
                    b.Navigation("PersonEdus");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.Types.SysLeaveType", b =>
                {
                    b.Navigation("PersonLeaves");
                });

            modelBuilder.Entity("EntityLayer.Concrete.System.Types.SysVisaType", b =>
                {
                    b.Navigation("PersonVisas");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Work.WorkGroupRType", b =>
                {
                    b.Navigation("WorkGroups");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Work.WorkGroupType", b =>
                {
                    b.Navigation("WorkGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
